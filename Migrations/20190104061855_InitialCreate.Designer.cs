// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StaticFilesTest.Data;

namespace StaticFilesTest.Migrations
{
    [DbContext(typeof(AddmissionContext))]
    [Migration("20190104061855_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StaticFilesTest.Models.AcceptedStudent", b =>
                {
                    b.Property<string>("Sid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("Grades");

                    b.Property<string>("GraduateSchool");

                    b.Property<int>("Rank");

                    b.Property<string>("Sname");

                    b.Property<float>("TotalGrade");

                    b.HasKey("Sid");

                    b.ToTable("AcceptedStudents");
                });

            modelBuilder.Entity("StaticFilesTest.Models.Admission", b =>
                {
                    b.Property<string>("Sid");

                    b.Property<string>("Uname");

                    b.Property<int>("Mid");

                    b.Property<string>("AdmissionMethod");

                    b.HasKey("Sid", "Uname", "Mid");

                    b.HasIndex("Mid");

                    b.HasIndex("Sid")
                        .IsUnique();

                    b.HasIndex("Uname");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("StaticFilesTest.Models.AdmissionsOffice", b =>
                {
                    b.Property<string>("Aname")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apassword");

                    b.HasKey("Aname");

                    b.ToTable("AdmissionsOffices");
                });

            modelBuilder.Entity("StaticFilesTest.Models.Application", b =>
                {
                    b.Property<string>("Sid");

                    b.Property<string>("Uname");

                    b.Property<int>("Mid");

                    b.Property<int>("No");

                    b.HasKey("Sid", "Uname", "Mid");

                    b.HasIndex("Mid");

                    b.HasIndex("Uname");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("StaticFilesTest.Models.Batch", b =>
                {
                    b.Property<string>("Bname")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ApplicationBeginTime");

                    b.Property<DateTime>("ApplicationEndTime");

                    b.Property<DateTime>("EnrollmentBeginTime");

                    b.Property<DateTime>("EnrollmentEndTime");

                    b.Property<float>("GradeLine");

                    b.HasKey("Bname");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("StaticFilesTest.Models.CollegeEnrollment", b =>
                {
                    b.Property<string>("Uname");

                    b.Property<int>("Mid");

                    b.Property<string>("Bname");

                    b.Property<int>("EnrollmentRemaning");

                    b.Property<bool>("IsComplete");

                    b.Property<int>("Menrollment");

                    b.HasKey("Uname", "Mid", "Bname");

                    b.HasAlternateKey("Bname", "Mid", "Uname");

                    b.HasIndex("Mid");

                    b.ToTable("CollegeEnrollments");
                });

            modelBuilder.Entity("StaticFilesTest.Models.DeliverFile", b =>
                {
                    b.Property<string>("Sid");

                    b.Property<string>("Uname");

                    b.Property<int>("Mid");

                    b.HasKey("Sid", "Uname", "Mid");

                    b.HasAlternateKey("Mid", "Sid", "Uname");

                    b.HasIndex("Uname");

                    b.ToTable("DeliverFiles");
                });

            modelBuilder.Entity("StaticFilesTest.Models.Major", b =>
                {
                    b.Property<int>("Mid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Mname");

                    b.HasKey("Mid");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("StaticFilesTest.Models.StudentsAccount", b =>
                {
                    b.Property<string>("Sid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Spassword");

                    b.HasKey("Sid");

                    b.ToTable("StudentsAccounts");
                });

            modelBuilder.Entity("StaticFilesTest.Models.StudentUniversityAdjustment", b =>
                {
                    b.Property<string>("Sid");

                    b.Property<string>("Uname");

                    b.Property<bool>("Adjustment");

                    b.HasKey("Sid", "Uname");

                    b.HasIndex("Uname");

                    b.ToTable("StudentUniversityAdjustments");
                });

            modelBuilder.Entity("StaticFilesTest.Models.UnacceptedStudent", b =>
                {
                    b.Property<string>("Sid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("Grades");

                    b.Property<string>("GraduateSchool");

                    b.Property<int>("Rank");

                    b.Property<string>("Sname");

                    b.Property<float>("TotalGrade");

                    b.HasKey("Sid");

                    b.ToTable("UnacceptedStudents");
                });

            modelBuilder.Entity("StaticFilesTest.Models.University", b =>
                {
                    b.Property<string>("Uname")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aname");

                    b.Property<bool>("ApprovalStatus");

                    b.Property<int>("Enrollment");

                    b.Property<float>("ExpandRate");

                    b.Property<string>("Upassword");

                    b.HasKey("Uname");

                    b.HasIndex("Aname");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("StaticFilesTest.Models.Admission", b =>
                {
                    b.HasOne("StaticFilesTest.Models.Major", "Major")
                        .WithMany()
                        .HasForeignKey("Mid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.AcceptedStudent", "AcceptedStudent")
                        .WithOne("Admission")
                        .HasForeignKey("StaticFilesTest.Models.Admission", "Sid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.University", "University")
                        .WithMany("Admissions")
                        .HasForeignKey("Uname")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StaticFilesTest.Models.Application", b =>
                {
                    b.HasOne("StaticFilesTest.Models.Major", "Major")
                        .WithMany()
                        .HasForeignKey("Mid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.UnacceptedStudent", "UnacceptedStudent")
                        .WithMany("Application")
                        .HasForeignKey("Sid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("Uname")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StaticFilesTest.Models.CollegeEnrollment", b =>
                {
                    b.HasOne("StaticFilesTest.Models.Batch", "Batch")
                        .WithMany("CollegeEnrollment")
                        .HasForeignKey("Bname")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.Major", "Major")
                        .WithMany()
                        .HasForeignKey("Mid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.University", "University")
                        .WithMany("Majors")
                        .HasForeignKey("Uname")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StaticFilesTest.Models.DeliverFile", b =>
                {
                    b.HasOne("StaticFilesTest.Models.Major", "Major")
                        .WithMany()
                        .HasForeignKey("Mid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.UnacceptedStudent", "UnacceptedStudent")
                        .WithMany("DeliverFiles")
                        .HasForeignKey("Sid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.University", "University")
                        .WithMany("DeliverFiles")
                        .HasForeignKey("Uname")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StaticFilesTest.Models.StudentUniversityAdjustment", b =>
                {
                    b.HasOne("StaticFilesTest.Models.UnacceptedStudent", "UnacceptedStudent")
                        .WithMany("StudentUniversityAdjustments")
                        .HasForeignKey("Sid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StaticFilesTest.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("Uname")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StaticFilesTest.Models.University", b =>
                {
                    b.HasOne("StaticFilesTest.Models.AdmissionsOffice", "AdmissionsOffice")
                        .WithMany("University")
                        .HasForeignKey("Aname");
                });
#pragma warning restore 612, 618
        }
    }
}
